/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} l1
 * @param {ListNode} l2
 * @return {ListNode}
 */
 
var addTwoNumbers = function(l1, l2) {
    var newListNode = new ListNode(0)
    var curr = newListNode
    var carry = 0

    while(l1 != null || l2 != null){
        var x = (l1 != null)? l1.val : 0
        var y = (l2 != null)? l2.val : 0
        var sum = x + y + carry
        carry = parseInt(sum / 10)
        curr.next = new ListNode(sum % 10)
        curr = curr.next
        if(l1 != null) l1 = l1.next
        if(l2 != null) l2 = l2.next
    }
    if(carry>0){
        curr.next = new ListNode(carry)
    }

    return newListNode.next
};


var addTwoNumbers = function(l1, l2, carry = 0) {
    
    let node = null
    
    if(l1 || l2){
        const val1 = l1 ? l1.val : 0
        const val2 = l2 ? l2.val : 0
        const next1 = l1 ? l1.next : null
        const next2 = l2 ? l2.next : null
        const sum = carry ? val1 + val2 + 1 : val1 + val2
        node = new ListNode(sum % 10)
        node.next = addTwoNumbers(next1, next2, sum >= 10)
    } else if (carry) {
        node = new ListNode(1)
    }
    
    return node
};
